operator= 	присваивает значения контейнеру
assign 	присваивает значения контейнеру
get_allocator 	возвращает связанный распределитель
------ 	------
Доступ к элементу 	
front 	доступ к первому элементу
------ 	------
итераторы 	
before_begi n 	возвращает итератор элементу перед началом
cbefore_begin 	возвращает константный итератор элементу перед началом
begin 	возвращает итератор в начало
cbegin 	возвращает константный итератор в начало
end 	возвращает итератор до конца
cend 	возвращает итератор до конца
Вместимость 	
empty 	проверяет, пуст ли контейнер
max_size 	возвращает максимально возможное количество элементов
Модификаторы 	
clear 	очищает содержимое
insert_after 	вставляет элементы после элемента
emplace_after 	создает элементы на месте после элемента
erase_after 	стирает элемент после элемента
push_front 	вставляет элемент в начало
emplace_front 	сначала создает элемент на месте
pop_front 	удаляет первый элемент
resize 	изменяет количество сохраненных элементов
swap 	своп содержимого
операции 	
merge 	объединяет два отсортированных списка
splice_after 	перемещает элементы из другого forward_list
remove 	удаляет элементы, удовлетворяющие определенным критериям
remove_if 	удаляет элементы, удовлетворяющие определенным критериям
reverse 	меняет порядок элементов
unique 	удаляет последовательные дублирующие элементы
sort 	сортирует элементы 


Контейнер forward_list представляет односвязный список. Для его использования необходимо подключить заголовочный файл forward_list.

Создание односвязного списка:
	
std::forward_list<int> list1;                     // пустой список
std::forward_list<int> list2(5);                  // list2 имеет 5 элементов, каждый из которых имеет значение по умолчанию
std::forward_list<int> list3(5, 2);               // list3 состоит из 5 чисел, каждое число равно 2
std::forward_list<int> list4{ 1, 2, 4, 5 };       // list4 состоит из чисел 1, 2, 4, 5
std::forward_list<int> list5 = { 1, 2, 3, 4, 5 }; // list5 состоит из чисел 1, 2, 3, 4, 5
std::forward_list<int> list6(list4);              // list6 - копия списка list4
std::forward_list<int> list7 = list4;             // list7 - копия списка list4
std::forward_list<int> list8({ 1, 2, 3, 4, 5, 6 }); // list8  состоит из чисел 1, 2, 3, 4, 5, 6
Получение элементов

Напрямую в списке forward_list можно получить только первый элемент. Для этого применяется функция front(). Для перебора элементов также можно использовать цикл:
	
#include <iostream>
#include <forward_list>
 
int main()
{
    std::forward_list<int> numbers = { 1, 2, 3, 4, 5 };
 
    int first = numbers.front();    // 1
 
    for (int n : numbers)
        std::cout << n << "\t";
    std::cout << std::endl;
    return 0;
}

Также для перебора и получения элементов можно использовать итераторы. Причем класс forward_list добавляет ряд дополнительных функций для получения итераторов: before_begin() и cbefore_begin(). Обе функции возвращают итератор (вторая функция возвращает константный итератор const_iterator) на несуществующий элемент непосредственно перед началом списка. К значению по этому итератору обратиться нельзя.
	
#include <iostream>
#include <forward_list>
 
int main()
{
    std::forward_list<int> numbers = { 1, 2, 3, 4, 5 };
 
    auto prev = numbers.before_begin();
 
    auto current = numbers.begin();
    auto end = numbers.end();
    while (current != end)
    {
        std::cout << *current << "\t";
        current++;
    }
    std::cout << std::endl;
 
    return 0;
}
Размер списка

По умолчанию класс forward_list не определяет никаких функций, которые позволяют получить размер контейнера. В этом классе только функция max_size(), которая позволяет получить масимальный размер контейнера.

Функция empty() позволяет узнать, пуст ли список. Если он пуст, то функция возвращает значение true, иначе возвращается значение false:
	
std::forward_list<int> numbers = { 1, 2, 3, 4, 5 };
if (numbers.empty())
    std::cout << "The forward_list is empty" << std::endl;
else
    std::cout << "The forward_list is not empty" << std::endl;

Для изменения размера контейнера можно использовать функцию resize(), которая имеет две формы:

    resize(n): оставляет в списке n первых элементов. Если список содержит больше элементов, то он усекается до первых n элементов. Если размер списка меньше n, то добавляются недостающие элементы и инициализируются значением по умолчанию

    resize(n, value): также оставляет в списке n первых элементов. Если размер списка меньше n, то добавляются недостающие элементы со значением value

Использование функции:
	
std::forward_list<int> numbers = { 1, 2, 3, 4, 5, 6 };
numbers.resize(4);  // оставляем первые четыре элемента - numbers = {1, 2, 3, 4}
 
numbers.resize(6, 8);    // numbers = {1, 2, 3, 4, 8, 8}
Изменение элементов списка

Функция assign() позволяет заменить все элементы списка определенным набором. Она имеет следующие формы:

    assign(il): заменяет содержимое контейнера элементами из списка инициализации il

    assign(n, value): заменяет содержимое контейнера n элементами, которые имеют значение value

    assign(begin, end): заменяет содержимое контейнера элементами из диапазона, на начало и конец которого указывают итераторы begin и end

Применение функции:
	
std::forward_list<int> numbers = { 1, 2, 3, 4, 5 };
 
numbers.assign({ 21, 22, 23, 24, 25 }); // numbers = { 21, 22, 23, 24, 25 }
 
numbers.assign(4, 3);       // numbers = {3, 3, 3, 3}
 
std::list<int> values = { 6, 7, 8, 9, 10, 11 };
auto start = ++values.begin();  // итератор указывает на второй элемент из values
auto end = values.end();
numbers.assign(start, end); //  numbers = { 7, 8, 9, 10, 11 }

Функция swap() обменивает значениями два списка:
	
std::forward_list<int> list1 = { 1, 2, 3, 4, 5 };
std::forward_list<int> list2 = { 6, 7, 8, 9};
list1.swap(list2);
// list1 = { 6, 7, 8, 9};
// list2 = { 1, 2, 3, 4, 5 };
Добавление элементов

Для добавления элементов в forward_list применяются следующие функции:

    push_front(val): добавляет объект val в начало списка

    emplace_front(val): добавляет объект val в начало списка

    emplace_after(p, val): вставляет объект val после элемента, на который указывает итератор p. Возвращает итератор на вставленный элемент. Если p представляет итератор на позицию после конца списка, то результат неопределен.

    insert_after(p, val): вставляет объект val после элемента, на который указывает итератор p. Возвращает итератор на вставленный элемент.

    insert_after(p, n, val): вставляет n объектов val после элемента, на который указывает итератор p. Возвращает итератор на последний вставленный элемент.

    insert_after(p, begin, end): вставляет после элемента, на который указывает итератор p, набор объектов из другого контейнера, начало и конец которого определяется итераторами begin и end. Возвращает итератор на последний вставленный элемент.

    insert_after(p, il): вставляет после элемента, на который указывает итератор p, список инициализации il. Возвращает итератор на последний вставленный элемент.

Применение функций:
	
#include <iostream>
#include <list>
#include <forward_list>
 
int main()
{
    std::forward_list<int> numbers = { 7, 8 };
    numbers.push_front(6);  // добавляем в начало число 6
    // numbers =  { 6, 7, 8 }
 
    numbers.emplace_front(-3);  // добавляем в начало число -3
    // numbers =  { -3, 6, 7, 8 }
 
    auto iter = numbers.begin();
    iter = numbers.emplace_after(iter, -2); // добавляем после итератора число -2
    // numbers =  { -3, -2, 6, 7, 8 }
 
    iter = numbers.insert_after(iter, -1);
    // numbers =  { -3, -2, -1, 6, 7, 8 }
 
    iter = numbers.insert_after(iter, 3, 0);    // добавляем три нуля
    // numbers =  { -3, -2, -1, 0, 0, 0, 6, 7, 8 }
 
    std::list<int> values = { 1, 2, 3 };
    iter = numbers.insert_after(iter, values.begin(), values.end()); // добавляем все элементы из values
    // numbers =  { -3, -2, -1, 0, 0, 0, 1, 2, 3, 6, 7, 8 }
 
    numbers.insert_after(iter, { 4, 5 }); // добавляем список { 4, 5 }
    // numbers =  { -3, -2, -1, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8 }
 
    for(int n : numbers)
        std::cout << n << "\t";
    std::cout << std::endl;
 
    return 0;
}
Удаление элементов

Чтобы удалить элемент из контейнера forward_list можно использовать следующие функции:

    clear(): удаляет все элементы

    pop_front(): удаляет первый элемент

    erase_after(p): удаляет элемент после элемента, на который указывает итератор p. Возвращает итератор на элемент после удаленного

    erase_after(begin, end): удаляет диапазон элементов, на начало и конец которого указывают соответственно итераторы begin и end. Возвращает итератор на элемент после последнего удаленного

Использование функций:
	
std::forward_list<int> numbers = { 1, 2, 3, 4, 5, 6, 7};
 
numbers.pop_front();
// numbers = { 2, 3, 4, 5, 6, 7};
 
auto iter = numbers.erase_after(numbers.begin());
// numbers = { 2, 4, 5, 6, 7 };
// iter указывает на элемент 4
 
numbers.erase_after(iter, numbers.end());
// numbers = { 2, 4 };




Member functions

(constructor)
    Construct forward_list object (public member function )

(destructor)
    Destroy forward_list object (public member function )

operator=
    Assign content (public member function )


Iterators

before_begin
    Return iterator to before beginning (public member function )

begin
    Return iterator to beginning (public member type )

end
    Return iterator to end (public member function )

cbefore_begin
    Return const_iterator to before beginning (public member function )

cbegin
    Return const_iterator to beginning (public member function )

cend
    Return const_iterator to end (public member function )


Capacity

empty
    Test whether array is empty (public member function )

max_size
    Return maximum size (public member function )


Element access

front
    Access first element (public member function )


Modifiers

assign
    Assign content (public member function )

emplace_front
    Construct and insert element at beginning (public member function )

push_front
    Insert element at beginning (public member function )

pop_front
    Delete first element (public member function )

emplace_after
    Construct and insert element (public member function )

insert_after
    Insert elements (public member function )

erase_after
    Erase elements (public member function )

swap
    Swap content (public member function )

resize
    Change size (public member function )

clear
    Clear content (public member function )


Operations

splice_after
    Transfer elements from another forward_list (public member function )

remove
    Remove elements with specific value (public member function )

remove_if
    Remove elements fulfilling condition (public member function template )

unique
    Remove duplicate values (public member function )

merge
    Merge sorted lists (public member function )

sort
    Sort elements in container (public member function )

reverse
    Reverse the order of elements (public member function )


Observers

get_allocator
    Get allocator (public member function )


Non-member function overloads

relational operators (forward_list)
    Relational operators for forward_list (function template )

swap (forward_list)
    Exchanges the contents of two forward_list containers (function template )









При этом следует учитывать, что индексация не добавляет элементов. Например, если вектор содержит 5 элементов, то мы не можем обратиться к шестому элементу:
	
std::vector<int> numbers= {1, 2, 3, 4, 5};
numbers[5] = 9;

При таком обращении результат неопределен. Некоторые комиляторы могут генерировать ошибку, некоторые продолжат работать, но даже в этом случае такое обращение будет ошибочно, и оно в любом случае не добавит в вектор шестой элемент.

Чтобы избежать подобных ситуаций, можно использовать функцию at(), которая хотя также возвращает элемент по индексу, но при попытке обращения по недопустимому индексу будет генерировать исключение out_of_range:

#include <iostream>
#include <vector>
#include <stdexcept>
 
int main()
{
    std::vector<int> numbers = { 1, 2, 3, 4, 5};
    try
    {
        int n = numbers.at(8);
    }
    catch (std::out_of_range e)
    {
        std::cout << "Incorrect index" << std::endl;
    }
 
    return 0;
}


Итераторы обеспечивают доступ к элементам контейнера. С помощью итераторов очень удобно перебирать элементы. Итератор описывается типом iterator. Но для каждого контейнера конкретный тип итератора будет отличаться. Так, итератор для контейнера list<int> представляет тип list<int>::iterator, а итератор контейнера vector<int> представляет тип vector<int>::iterator и так далее.

Для получения итераторов контейнеры в C++ обладают такими функциями, как begin() и end(). Функция begin() возвращает итератор, который указывает на первый элемент контейнера (при наличии в контейнере элементов). Функция end() возвращает итератор, который указывает на следующую позицию после последнего элемента, то есть по сути на конец контейнера. Если контейнер пуст, то итераторы, возвращаемые обоими методами begin и end совпадают. Если итератор begin не равен итератору end, то между ними есть как минимум один элемент.

Обе этих функции возвращают итератор для конкретного типа контейнера:

std::vector<int> v = { 1,2,3,4 };
std::vector<int>::iterator iter = v.begin();  // получаем итератор

В данном случае создается вектор - контейнер типа vector, который содержит значения типа int. И этот контейнер инициализируется набором {1, 2, 3, 4}. И через метод begin() можно получить итератор для этого контейнера. Причем этот итератор будет указывать на первый элемент контейнера.
Операции с итераторами

С итераторами можно проводить следующие операции:

    *iter: получение элемента, на который указывает итератор

    ++iter: перемещение итератора вперед для обращения к следующему элементу

    --iter: перемещение итератора назад для обращения к предыдущему элементу. Итераторы контейнера forward_list не поддерживают операцию декремента.

    iter1 == iter2: два итератора равны, если они указывают на один и тот же элемент

    iter1 != iter2: два итератора не равны, если они указывают на разные элементы

Например, используем итераторы для перебора элементов вектора:

#include <iostream>
#include <vector>
 
int main()
{
	std::vector<int> v = {1, 2, 3, 4, 5};
	auto iter = v.begin();	// получаем итератор
	while(iter!=v.end())	// пока не дойдем до конца
	{
		std::cout << *iter << std::endl;// получаем элементы через итератор
		++iter;				// перемещаемся вперед на один элемент
	}
	
    return 0;
}

При работе с контейнерами следует учитывать, что добавление или удаление элементов в контейнере может привести к тому, что все текущие итераторы для данного контейнера, а также ссылки и указатели на его элементы станут недопустимыми.

Итераторы позволяют не только получать элементы, но и изменять их:

#include <iostream>
#include <vector>
 
int main()
{
	std::vector<int> v = {1, 2, 3, 4, 5};
	auto iter = v.begin();
	while(iter!=v.end())	// пока не дойдем до конца
	{
		*iter = (*iter) * (*iter); // возводим число в квадрат
		++iter;
	}
	
	for(iter = v.begin(); iter!=v.end(); ++iter)
	{
		std::cout << *iter << std::endl;
	}
	
    return 0;
}

В данном случае в цикле while элементы вектора возводятся в квадрат. Консольный вывод данной программы:

1
4
9
16
25

Константные итераторы

Если контейнер представляет константу, то для обращения к элементам этого контейнера можно использовать только константный итератор (тип const_iterator). Такой итератор позволяет считывать элементы, но не изменять их:

const vector<int> v = {1, 2, 3, 4, 5};
for(auto iter = v.begin(); iter != v.end(); ++iter)
{
	std::cout << *iter << std::endl;
	// так нельзя сделать
	//*iter = (*iter) * (*iter);
}

Для получения константного итератора также можно использовать функции cbegin() и cend. При этом даже если контейнер не представляет константу, но при этом для его перебора используется константный итератор, то опять же нельзя изменять значения элементов этого контейнера:

#include <iostream>
#include <vector>

int main()
{
	std::vector<int> v = { 1, 2, 3, 4, 5 };
	for (std::vector<int>::const_iterator iter = v.cbegin(); iter != v.cend(); ++iter)
	{
		std::cout << *iter << std::endl;
		// так нельзя сделать, так как итератор константный
		//*iter = (*iter) * (*iter);
	}
	return 0;
}

Реверсивные итераторы

Реверсивные итераторы позволяют перебирать элементы контейнера в обратном направлении. Для получения реверсивного итератора применяются функции rbegin() и rend(), а сам итератор представляет тип :

#include <iostream>
#include <vector>

int main()
{
	std::vector<int> v = { 1, 2, 3, 4, 5 };
	for (std::vector<int>::reverse_iterator iter = v.rbegin(); iter != v.rend(); ++iter)
	{
		std::cout << *iter << std::endl;
	}
	std::cout << "\n";
	return 0;
}

Консольный вывод программы:

5
4
3
2
1

Если надо обеспечить защиту от изменения значений контейнера, то можно использовать константный реверсивный итератор, который представлен типом const_reverse_iterator и который можно получить с помощью функций crbegin() и crend():

#include <iostream>
#include <vector>

int main()
{
	std::vector<int> v = { 1, 2, 3, 4, 5 };
	for (std::vector<int>::const_reverse_iterator iter = v.crbegin(); iter != v.crend(); ++iter)
	{
		std::cout << *iter << std::endl;
		// так нельзя сделать, так как итератор константный
		//*iter = (*iter) * (*iter);
	}
	return 0;
}

Также итераторы для всех типов, кроме list и forward_list, поддерживают ряд дополнительных операций:

    iter + n: возвращает итератор, который смещен от итератора iter на n позиций вперед

    iter - n: возвращает итератор, который смещен от итератора iter на n позиций назад

    iter += n: перемещает итератор на n позиций вперед

    iter -= n: перемещает итератор на n позиций назад

    iter1 - iter2: возвращает количество позиций между итераторами iter1 и iter2

    >, >=, <, <=: операции сравнения. Один итератор больше другого, если указывает на элемент, который ближе к концу

Применение некоторых операций:

std::vector<int> v = {1, 2, 3, 4, 5};
auto iter1 = v.begin();
auto iter2 = iter1 + 2;
std::cout << *iter2 << std::endl;		// 3

bool res = iter2 > iter1;	// true
std::cout << res << std::endl;



 В C ++ цикл через контейнер последовательности c может быть выполнен с использованием индексов следующим образом:

for(size_t i = 0; i < c.size(); ++i) c[i] = 0;

В то время как простые, такие записи подвержены общим семантическим ошибкам, таким как неправильный оператор сравнения или неправильная переменная индексации:

for(size_t i = 0; i <= c.size(); ++j) c[i] = 0;
                     ^~~~~~~~~~~~~~^

Цикл также может быть достигнут для всех контейнеров с использованием итераторов с аналогичными недостатками:

for(iterator it = c.begin(); it != c.end(); ++it) (*it) = 0;

В C ++ 11 введены диапазоны для циклов и ключевое слово auto , что позволяет коду стать:

for(auto& x : c) x = 0;

Здесь единственными параметрами являются контейнер c , а переменная x - текущее значение. Это предотвращает преждевременные ошибки семантики.

Согласно стандарту C ++ 11, базовая реализация эквивалентна:

for(auto begin = c.begin(), end = c.end(); begin != end; ++begin)
{
    // ...
}

В такой реализации выражение auto begin = c.begin(), end = c.end(); силы begin и end одинаковым типом, а end никогда не увеличивается и не разыгрывается. Таким образом, цикл, основанный на диапазоне, работает только для контейнеров, определяемых паре iterator / iterator. Стандарт C ++ 17 смягчает это ограничение, изменяя реализацию:

auto begin = c.begin();
auto end = c.end();
for(; begin != end; ++begin)
{
    // ...
}

Здесь begin и end допускаются к разным типам, если их можно сравнить с неравенством. Это позволяет прокручивать больше контейнеров, например, контейнер, определенный парой итератор / дозорный






constexpr - это ключевое слово, которое может использоваться для обозначения значения переменной как постоянного выражения, функции, потенциально пригодной для использования в постоянных выражениях, или (поскольку C ++ 17) оператор if имеет только одну из своих ветвей, выбранных для компиляции.
замечания
#

constexpr слово constexpr было добавлено в C ++ 11, но в течение нескольких лет после публикации стандарта C ++ 11 не все основные компиляторы поддерживали его. в то время, когда был опубликован стандарт C ++ 11. На момент публикации C ++ 14 все основные компиляторы поддерживают constexpr .

 Функция, объявленная как constexpr является неявно встроенной, и constexpr такой функции потенциально дает постоянные выражения. Например, следующая функция, если вызывается с постоянными аргументами выражения, также дает константное выражение:
C ++ 11

constexpr int Sum(int a, int b)
{
    return a + b;
}

Таким образом, результат вызова функции может использоваться как constexpr массива или аргумент шаблона или инициализировать переменную constexpr :
C ++ 11

int main()
{
    constexpr int S = Sum(10,20);
   
    int Array[S];
    int Array2[Sum(20,30)]; // 50 array size, compile time
}

Обратите внимание: если вы удаляете constexpr из спецификации типа возвращаемого значения, присваивание S не будет работать, так как S является constexpr и ей должна быть назначена constexpr времени компиляции. Аналогично, размер массива также не будет константным выражением, если функция Sum не constexpr .

Интересная вещь о constexpr заключается в том, что вы можете использовать ее как обычные функции:
C ++ 11

int a = 20;
auto sum = Sum(a, abs(-20));

Sum теперь не будет функцией constexpr , она будет скомпилирована как обычная функция, принимая переменные (непостоянные) аргументы и возвращая непостоянное значение. Вам не нужно писать две функции.

Это также означает, что если вы попытаетесь назначить такой вызов неконстантной переменной, он не будет компилироваться:
C ++ 11

int a = 20;
constexpr auto sum = Sum(a, abs(-20));

Причина проста: constexpr должна constexpr только константа времени компиляции. Однако вышеупомянутый вызов функции делает Sum не constexpr (значение R не является constexpr , но L-значение объявляет себя constexpr ).

Функция constexpr также должна возвращать константу времени компиляции. Следующее не будет компилироваться:
C ++ 11

constexpr int Sum(int a, int b)
{
    int a1 = a;     // ERROR
    return a + b;
}

Поскольку a1 является переменной , отличной от constexpr, и запрещает функции быть истинной функцией constexpr . Что делает его constexpr и присвоение ему также не будет работать - так как значение a a (входящего параметра) до сих пор еще не известно:
C ++ 11

constexpr int Sum(int a, int b)
{
   constexpr int a1 = a;     // ERROR
   ..

Кроме того, следующее не будет компилироваться:
C ++ 11

constexpr int Sum(int a, int b)
{
   return abs(a) + b; // or abs(a) + abs(b)
}

Поскольку abs(a) не является постоянным выражением (даже abs(10) не будет работать, так как abs не возвращает constexpr int !

Как насчет этого?
C ++ 11

constexpr int Abs(int v)
{
    return v >= 0 ? v : -v;
}

constexpr int Sum(int a, int b)
{
    return Abs(a) + b;
}

Мы создали собственную функцию Abs которая является constexpr , а тело Abs также не нарушает никакого правила. Кроме того, на сайте вызова (внутри Sum ) выражение вычисляется как constexpr . Следовательно, вызов Sum(-10, 20) будет выражением постоянной времени компиляции, результатом которого будет 30 .


 Переменная, объявленная constexpr , неявно const и ее значение может использоваться как постоянное выражение.

Сравнение с #define

constexpr - это безопасная замена для выражений времени компиляции на основе #define . С constexpr выражение с constexpr времени компиляции заменяется результатом. Например:
C ++ 11

int main()
{
   constexpr int N = 10 + 2;
   cout << N;
}

выдает следующий код:

cout << 12;

Макрос компиляции, основанный на предварительном процессоре, будет отличаться. Рассматривать:

#define N 10 + 2

int main()
{
    cout << N;
}

будет производить:

cout << 10 + 2;

который, очевидно, будет преобразован в cout << 10 + 2; , Однако компилятору придется больше работать. Кроме того, это создает проблему, если не используется правильно.

Например (с #define ):

cout << N * 2;

формы:

cout << 10 + 2 * 2; // 14

Но предварительно оцененный constexpr правильно дал бы 24 .

Сравнение с const

const переменная - это переменная, для которой требуется память для хранения. constexpr не делает. constexpr создает constexpr времени компиляции, которая не может быть изменена. Вы можете утверждать, что const также не может быть изменен. Но учтите:

int main()
{
   const int size1 = 10;
   const int size2 = abs(10);

   int arr_one[size1]; 
   int arr_two[size2]; 
}

С большинством компиляторов второй оператор не работает (может работать с GCC, например). Размер любого массива, как вы знаете, должен быть постоянным выражением (т. Е. Результатом значения времени компиляции). Второй переменной size2 присваивается определенное значение, которое определяется во время выполнения (даже если вы знаете, что это 10 , для компилятора это не время компиляции).

Это означает , что const может или не может быть истинной константой времени компиляции. Вы не можете гарантировать или обеспечить, чтобы конкретное значение const абсолютно компилируемым. Вы можете использовать #define но у него есть свои подводные камни.

Поэтому просто используйте:
C ++ 11

int main()
{
    constexpr int size = 10;

    int arr[size];
}

Выражение constexpr должно оцениваться до значения времени компиляции. Таким образом, вы не можете использовать:
C ++ 11

constexpr int size = abs(10);

Если функция ( abs ) сама возвращает constexpr .

Все базовые типы могут быть инициализированы с помощью constexpr .
C ++ 11

constexpr bool FailFatal = true;
constexpr float PI = 3.14f;
constexpr char* site= "StackOverflow";

Интересно, что и удобно, вы также можете использовать auto :
C ++ 11

constexpr auto domain = ".COM";  // const char * const domain = ".COM"
constexpr auto PI = 3.14;        // constexpr double



 C ++ 17

Оператор if constexpr может использоваться для условной компиляции кода. Условие должно быть постоянным выражением. Отключенная ветвь не отбрасывается. Отбрасываемый оператор внутри шаблона не создается. Например:

template<class T, class ... Rest>
void g(T &&p, Rest &&...rs)
{
  // ... handle p
  if constexpr (sizeof...(rs) > 0)
    g(rs...);  // never instantiated with an empty argument list
}

Кроме того, переменные и функции, которые используются odr только внутри отброшенных операторов, не требуются для определения, а отбрасываемые операторы return не используются для вычитания типа функции.

if constexpr отличается от #ifdef . #ifdef условно компилирует код, но только на основе условий, которые могут быть оценены во время предварительной обработки. Например, #ifdef не может использоваться для условной компиляции кода в зависимости от значения параметра шаблона. С другой стороны, if constexpr не может использоваться для отбрасывания синтаксически недействительного кода, в то время как #ifdef может.

if constexpr(false) {
    foobar;  // error; foobar has not been declared
    std::vector<int> v("hello, world");  // error; no matching constructor
}


Ключевое слово decltype может использоваться для получения типа переменной, функции или выражения. 


 Этот пример просто иллюстрирует, как можно использовать это ключевое слово.

int a = 10;

// Assume that type of variable 'a' is not known here, or it may
// be changed by programmer (from int to long long, for example).
// Hence we declare another variable, 'b' of the same type using 
// decltype keyword.
decltype(a) b; // 'decltype(a)' evaluates to 'int'

Если, например, кто-то изменяет тип 'a':

float a=99.0f;

Тогда тип переменной b теперь автоматически становится float . 

 Скажем, у нас есть вектор:

std::vector<int> intVector;

И мы хотим объявить итератор для этого вектора. Очевидная идея - использовать auto . Однако может потребоваться просто объявить переменную итератора (и не назначать ее чему-либо). Мы бы сделали:

vector<int>::iterator iter;

Тем не менее, с помощью decltype становится легче и меньше подвержено ошибкам (если изменяется тип intVector ).

decltype(intVector)::iterator iter;

В качестве альтернативы:

decltype(intVector.begin()) iter;

Во втором примере возвращаемый тип begin используется для определения фактического типа, который является vector<int>::iterator .

Если нам нужен const_iterator, нам просто нужно использовать cbegin :

decltype(intVector.cbegin()) iter; // vector<int>::const_iterator


     static_assert ( bool_constexpr , message )
    static_assert ( bool_constexpr ) / * Поскольку C ++ 17 * / 

параметры
#
параметр 	подробности
bool_constexpr 	Выражение для проверки
сообщение 	Сообщение для печати, когда bool_constexpr является ложным
замечания
#

В отличие от утверждений времени исполнения , статические утверждения проверяются во время компиляции и также применяются при компиляции оптимизированных сборок.

https://riptutorial.com/ru/cplusplus/topic/3822/static-assert

 Утверждения означают, что условие должно быть проверено, и если оно ложно, это ошибка. Для static_assert() это делается компиляцией.

template<typename T>
T mul10(const T t)
{
    static_assert( std::is_integral<T>::value, "mul10() only works for integral types" );
    return (t << 3) + (t << 1);
}

У static_assert() есть обязательный первый параметр, условие - это bool constexpr. Он может иметь второй параметр, это сообщение, которое является строковым литералом. Из C ++ 17 второй параметр является необязательным; до этого он является обязательным.
C ++ 17

template<typename T>
T mul10(const T t)
{
    static_assert(std::is_integral<T>::value);
    return (t << 3) + (t << 1);
}

Он используется, когда:

    В общем случае проверка во время компиляции требуется для некоторого типа по значению constexpr
    Функция шаблона должна проверять определенные свойства передаваемого им типа
    Один хочет написать тестовые примеры:
        шаблонные метафоры
        функции constexpr
        макропрограммирование макросов 
    Требуются определенные определения (например, версия на С ++)
    Портирование устаревшего кода, утверждений о sizeof(T) (например, 32-битный int)
    Для работы программы требуются определенные функции компилятора (упаковка, пустая оптимизация базового класса и т. Д.). 

Обратите внимание, что static_assert() не участвует в SFINAE : таким образом, когда возможны дополнительные перегрузки / специализации, его нельзя использовать вместо методов метапрограммирования шаблонов (например, std::enable_if<> ). Он может использоваться в коде шаблона, когда ожидаемая перегрузка / специализация уже найдена, но необходимы дальнейшие проверки. В таких случаях он может предоставить более конкретные сообщения об ошибках, чем полагаться на SFINAE для этого.




